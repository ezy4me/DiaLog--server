// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ----------------
/// USER MODEL GROUP
/// ----------------

model User {
  id Int @id @default(autoincrement())

  email    String @unique
  password String
  role     String 

  profile   Profile?

  insulinDosage              InsulinDosage[]
  bloodSugar                 BloodSugar[]
  dish                       Dish[]
  patientPermissonsAsDoctor  PatientPermisson[] @relation("DoctorPermissions")
  patientPermissonsAsPatient PatientPermisson[] @relation("PatientPermissions")
  message                    Message[]

  chatAsDoctor  Chat[] @relation("DoctorChat")
  chatAsPatient Chat[] @relation("PatientChat")
}

model PatientPermisson {
  id Int @id @default(autoincrement())

  doctor   User @relation("DoctorPermissions", fields: [doctorId], references: [id], onDelete: Cascade)
  doctorId Int

  patient   User @relation("PatientPermissions", fields: [patientId], references: [id], onDelete: Cascade)
  patientId Int
}

model Profile {
  id Int @id @default(autoincrement())

  token String  @unique
  name   String
  gender String
  height Float
  weight Float

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique

  diabetesType   DiabetesType @relation(fields: [diabetesTypeId], references: [id], onDelete: Cascade)
  diabetesTypeId Int
}

model DiabetesType {
  id Int @id @default(autoincrement())

  name String @unique

  profile Profile[]
}

/// --------------------------
/// INSULIN DOSAGE MODEL GROUP
/// --------------------------

model InsulinDosage {
  id Int @id @default(autoincrement())

  value Float
  date  DateTime
  time  DateTime

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  insulinType   InsulinType @relation(fields: [insulinTypeId], references: [id], onDelete: Cascade)
  insulinTypeId Int
}

model InsulinType {
  id            Int             @id @default(autoincrement())

  name String @unique
  insulinDosage InsulinDosage[]
}

/// -----------------------
/// BLOOD SUGAR MODEL GROUP
/// -----------------------

model BloodSugar {
  id Int @id @default(autoincrement())

  value Float
  date  DateTime
  time  DateTime

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

/// ----------------
/// CHAT MODEL GROUP
/// ----------------

model Chat {
  id Int @id @default(autoincrement())

  doctor   User @relation("DoctorChat", fields: [doctorId], references: [id], onDelete: Cascade)
  doctorId Int

  patient     User          @relation("PatientChat", fields: [patientId], references: [id], onDelete: Cascade)
  patientId   Int
  chatHistory ChatHistory?
}

model ChatHistory {
  id Int @id @default(autoincrement())

  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId Int @unique
  chat      Chat    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    Int @unique
}

model Message {
  id Int @id @default(autoincrement())

  text     String
  dateTime DateTime

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  chatHistory ChatHistory?
}

/// ---------------------
/// NUTRITION MODEL GROUP
/// ---------------------

model Nutrition {
  id Int @id @default(autoincrement())

  date DateTime
  time DateTime

  dish   Dish @relation(fields: [dishId], references: [id], onDelete: Cascade)
  dishId Int

  nutritionType   NutritionType @relation(fields: [nutritionTypeId], references: [id], onDelete: Cascade)
  nutritionTypeId Int
}

model NutritionType {
  id Int @id @default(autoincrement())

  name String @unique

  nutrition Nutrition[]
}

model Dish {
  id Int @id @default(autoincrement())

  name   String
  status Boolean

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  foodDishes FoodDishes[]
  nutrition  Nutrition[]
}

model Food {
  id Int @id @default(autoincrement())

  name          String
  proteins      Float
  fats          Float
  carbohydrates Float
  energy        Float

  foodDishes FoodDishes[]
}

model FoodDishes {
  id Int @id @default(autoincrement())

  weight Float

  dish   Dish @relation(fields: [dishId], references: [id], onDelete: Cascade)
  dishId Int

  food   Food @relation(fields: [foodId], references: [id], onDelete: Cascade)
  foodId Int
}
